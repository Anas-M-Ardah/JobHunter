@model JobHunter.Models.Resume

@{
    ViewData["Title"] = $"{Model.FirstName} {Model.LastName}";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Calibri', 'Segoe UI', Arial, sans-serif;
            line-height: 1.2;
            color: #333333;
            background: #f5f5f5;
            font-size: 10pt;
            padding: 20px;
        }

        .cv-container {
            max-width: 8.5in;
            margin: 0 auto;
            background: white;
            padding: 0.5in;
            min-height: 11in;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            border: 1px solid #ddd;
            position: relative;
        }

            .cv-container::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: white;
                border: 1px solid #ccc;
                box-shadow: 2px 2px 4px rgba(0,0,0,0.1), inset 0 0 0 1px rgba(255,255,255,0.8);
                z-index: -1;
            }

        /* Editable Elements */
        .editable {
            border: 1px dashed transparent;
            padding: 2px;
            transition: all 0.3s ease;
            min-height: 1.2em;
            cursor: text;
            outline: none;
        }

            .editable:hover {
                border-color: #2F5496;
                background-color: rgba(47, 84, 150, 0.05);
            }

            .editable:focus {
                border-color: #2F5496;
                background-color: rgba(47, 84, 150, 0.1);
                box-shadow: 0 0 5px rgba(47, 84, 150, 0.3);
            }

            .editable[contenteditable="true"]:empty:before {
                content: attr(data-placeholder);
                color: #999;
                font-style: italic;
            }

        /* Control Panel */
        .control-panel {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            border: 1px solid #ddd;
            min-width: 200px;
        }

        .control-buttons {
            display: flex;
            gap: 8px;
            flex-direction: column;
        }

        .btn {
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 10pt;
            transition: background-color 0.3s;
            text-align: center;
            font-family: inherit;
        }

        .btn-primary {
            background: #2F5496;
            color: white;
        }

            .btn-primary:hover {
                background: #1e3a6f;
            }

        .btn-success {
            background: #28a745;
            color: white;
        }

            .btn-success:hover {
                background: #1e7e34;
            }

        .btn-warning {
            background: #ffc107;
            color: #333;
        }

            .btn-warning:hover {
                background: #e0a800;
            }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

            .btn-danger:hover {
                background: #c82333;
            }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

            .btn-secondary:hover {
                background: #545b62;
            }

        .btn-info {
            background: #17a2b8;
            color: white;
        }

            .btn-info:hover {
                background: #138496;
            }

        /* Add Item Buttons */
        .add-item-container {
            margin: 10px 0;
            text-align: center;
            display: none;
        }

        .editing .add-item-container {
            display: block;
        }

        .add-item-btn {
            background: #17a2b8;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 9pt;
            margin: 0 5px;
        }

            .add-item-btn:hover {
                background: #138496;
            }

        /* Remove Item Buttons */
        .remove-item-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 2px 6px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 8pt;
            margin-left: 10px;
            display: none;
        }

        .editing .remove-item-btn {
            display: inline-block;
        }

        .remove-item-btn:hover {
            background: #c82333;
        }

        /* Edit Mode Indicator */
        .edit-mode-indicator {
            position: fixed;
            top: 20px;
            left: 20px;
            background: #28a745;
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 9pt;
            z-index: 1000;
            display: none;
        }

        .editing .edit-mode-indicator {
            display: block;
        }

        /* Header Section - Matching Word Style */
        .cv-header {
            text-align: left;
            margin-bottom: 20px;
            border-bottom: none;
            padding-bottom: 0;
        }

            .cv-header h1 {
                font-size: 24pt;
                font-weight: bold;
                color: #2F5496;
                margin-bottom: 8px;
                letter-spacing: 0;
                line-height: 1.1;
            }

        .job-title {
            font-size: 13pt;
            color: #595959;
            font-style: italic;
            margin-bottom: 8px;
            line-height: 1.2;
        }

        .contact-info {
            font-size: 9pt;
            color: #595959;
            line-height: 1.3;
            margin-bottom: 6px;
        }

        .contact-links {
            font-size: 9pt;
            color: #595959;
            line-height: 1.3;
            margin-bottom: 15px;
        }

        /* Horizontal Line */
        .header-separator {
            height: 2px;
            background: #2F5496;
            margin-bottom: 15px;
            border: none;
        }

        /* Section Styling - Matching Word Style */
        .section {
            margin-bottom: 20px;
            page-break-inside: avoid;
        }

        .section-title {
            font-size: 12pt;
            font-weight: bold;
            color: #2F5496;
            margin-bottom: 8px;
            border-bottom: 1px solid #2F5496;
            padding-bottom: 2px;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-variant: small-caps;
        }

        .summary {
            font-size: 10pt;
            line-height: 1.5;
            color: #333;
            text-align: justify;
            margin-bottom: 5px;
        }

        /* Item Layout - Matching Word Document */
        .experience-item, .education-item, .certificate-item {
            margin-bottom: 15px;
            position: relative;
            page-break-inside: avoid;
        }

        .item-header {
            margin-bottom: 5px;
        }

        /* Title-Duration Layout - Matching Word's Tab Stops */
        .item-title-line {
            display: flex;
            justify-content: space-between;
            align-items: baseline;
            margin-bottom: 3px;
        }

        .item-title {
            font-size: 11pt;
            font-weight: bold;
            color: #333;
            flex: 1;
            padding-right: 20px;
        }

        .item-duration {
            font-size: 9pt;
            color: #595959;
            white-space: nowrap;
            text-align: right;
            min-width: 120px;
        }

        .item-company, .item-institution {
            font-size: 11pt;
            color: #2F5496;
            font-style: italic;
            margin-bottom: 5px;
            line-height: 1.2;
        }

        .item-description {
            font-size: 10pt;
            color: #333;
            line-height: 1.4;
            margin-top: 5px;
            text-align: justify;
            padding-left: 18pt; /* Indentation like Word */
        }

        /* Bullet Points */
        .bullet-point {
            font-size: 10pt;
            color: #333;
            line-height: 1.4;
            margin-bottom: 3px;
            padding-left: 36pt;
            text-indent: -18pt;
            position: relative;
        }

            .bullet-point::before {
                content: "• ";
                font-weight: bold;
                position: absolute;
                left: 18pt;
            }

        /* Skills Section - Matching Word Style */
        .skills-content {
            font-size: 10pt;
            line-height: 1.5;
        }

        .skill-category {
            margin-bottom: 8px;
            line-height: 1.4;
        }

        .skill-category-title {
            font-weight: bold;
            color: #2F5496;
            display: inline;
            margin-right: 5px;
        }

        .skill-items {
            color: #333;
            display: inline;
        }

        /* Languages Section - Single Line Layout */
        .languages-content {
            font-size: 10pt;
            color: #333;
        }

        .languages-list {
            display: flex;
            flex-wrap: wrap;
            gap: 18px;
            align-items: center;
        }

        .language-item-container {
            margin-bottom: 0;
            position: relative;
            display: inline-block;
        }

        .language-item {
            display: inline-flex;
            align-items: center;
            gap: 3px;
            white-space: nowrap;
        }

        .language-name {
            font-weight: normal;
            color: #333;
        }

        .language-level {
            color: #333;
        }

        /* Certificate styling */
        .certificate-item .item-title-line {
            margin-bottom: 3px;
        }

        .item-provider {
            font-size: 10pt;
            color: #595959;
            font-style: italic;
        }

        .no-data {
            color: #888;
            font-style: italic;
            font-size: 10pt;
        }

        /* Two Column Layout for Languages and Certificates */
        .two-column-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 20px;
        }

        .column {
            min-height: 100px;
        }

        /* Print Styles - Matching Word Output */
        @@media print {
            *

        {
            -webkit-print-color-adjust: exact !important;
            color-adjust: exact !important;
            print-color-adjust: exact !important;
        }

        body {
            background: white !important;
            font-size: 10pt !important;
            padding: 0 !important;
            margin: 0 !important;
        }

        .cv-container {
            margin: 0 !important;
            padding: 0.5in !important;
            max-width: none !important;
            box-shadow: none !important;
            border: none !important;
            width: 100% !important;
            min-height: auto !important;
        }

            .cv-container::before {
                display: none !important;
            }

        .control-panel,
        .add-item-container,
        .remove-item-btn,
        .edit-mode-indicator {
            display: none !important;
        }

        .editable {
            border: none !important;
            background: none !important;
            box-shadow: none !important;
            padding: 0 !important;
        }

        .section {
            break-inside: avoid !important;
            page-break-inside: avoid !important;
            margin-bottom: 16px !important;
        }

        .experience-item, .education-item, .certificate-item {
            break-inside: avoid !important;
            page-break-inside: avoid !important;
            margin-bottom: 12px !important;
        }

        .item-title-line {
            display: flex !important;
            justify-content: space-between !important;
            align-items: baseline !important;
        }

        .item-title {
            font-size: 11pt !important;
            flex: 1 !important;
            padding-right: 20px !important;
        }

        .item-duration {
            font-size: 9pt !important;
            white-space: nowrap !important;
            text-align: right !important;
            min-width: 120px !important;
        }

        .languages-list {
            display: flex !important;
            flex-wrap: wrap !important;
            gap: 15px !important;
        }

        .language-item-container {
            margin-bottom: 0 !important;
            display: inline-block !important;
        }

        .language-item {
            display: inline-flex !important;
            align-items: center !important;
            gap: 3px !important;
            white-space: nowrap !important;
        }

        .cv-header h1 {
            font-size: 22pt !important;
        }

        .section-title {
            font-size: 12pt !important;
        }

        .two-column-section {
            display: grid !important;
            grid-template-columns: 1fr 1fr !important;
            gap: 20px !important;
        }

        .job-title {
            font-size: 13pt !important;
        }

        .contact-info, .contact-links {
            font-size: 9pt !important;
        }

        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            body

        {
            padding: 10px;
        }

        .cv-container {
            padding: 20px;
        }

        .control-panel {
            position: relative;
            top: auto;
            right: auto;
            margin-bottom: 20px;
            width: 100%;
        }

        .control-buttons {
            flex-direction: row;
            flex-wrap: wrap;
        }

        .item-title-line {
            flex-direction: column !important;
            align-items: flex-start !important;
        }

        .item-title, .item-duration {
            padding-right: 0 !important;
        }

        .item-duration {
            margin-top: 3px;
            font-size: 9pt;
            text-align: left !important;
            min-width: auto !important;
        }

        .languages-list {
            flex-direction: column;
            align-items: flex-start;
            gap: 8px;
        }

        .two-column-section {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .cv-header h1 {
            font-size: 20pt;
        }

        }

        .item-degree-gpa {
            font-size: 10pt;
            color: #595959;
            margin-bottom: 3px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .item-degree {
            font-style: italic;
            flex: 1;
            padding-right: 10px;
        }

        .item-gpa {
            white-space: nowrap;
            font-weight: normal;
        }

        /* Responsive adjustments for mobile */
        @@media (max-width: 768px) {
            .item-degree-gpa

        {
            flex-direction: column !important;
            align-items: flex-start !important;
        }

        .item-degree, .item-gpa {
            padding-right: 0 !important;
        }

        .item-gpa {
            margin-top: 2px;
            text-align: left !important;
        }

        }

        /* Print styles */
        @@media print {
            .item-degree-gpa

        {
            display: flex !important;
            justify-content: space-between !important;
            align-items: center !important;
        }

        .item-degree {
            font-size: 10pt !important;
            flex: 1 !important;
            padding-right: 10px !important;
        }

        .item-gpa {
            font-size: 10pt !important;
            white-space: nowrap !important;
            text-align: right !important;
        }

        }
    </style>
</head>
<body>
    <div class="edit-mode-indicator">✏️ Edit Mode Active - Click on text to edit</div>

    <div class="control-panel">
        <div class="control-buttons">
            <button id="editBtn" class="btn btn-primary">🖊️ Enable Editing</button>
            <button id="saveBtn" class="btn btn-success" style="display: none;">💾 Save Changes</button>
            <button id="downloadBtn" class="btn btn-warning">📄 Download PDF</button>
            <button id="printBtn" class="btn btn-secondary">🖨️ Print</button>
            <button id="resetBtn" class="btn btn-danger" style="display: none;">🔄 Reset</button>
            <form method="post" action="/Resume/DownloadWordDocument">
                <input type="hidden" name="resumeId" value="@Model.ResumeId" />
                <button type="submit" class="btn btn-info" style="width: 100%">📝 Download Word</button>
            </form>
        </div>
    </div>

    <div class="cv-container" id="cvContainer">
        <!-- Header Section -->
        <div class="cv-header">
            <h1>
                <span class="editable" contenteditable="false" data-placeholder="First Name">@Model.FirstName</span>
                <span class="editable" contenteditable="false" data-placeholder="Last Name">@Model.LastName</span>
            </h1>

@if (!string.IsNullOrEmpty(Model.Title))
{
                <div class="job-title">
                    <span class="editable" contenteditable="false" data-placeholder="Job Title">@Model.Title</span>
                </div>
}

            <div class="contact-info">
                <span class="editable" contenteditable="false" data-placeholder="Address">@(Model.Address ?? "")</span>
@if (!string.IsNullOrEmpty(Model.Address) && (!string.IsNullOrEmpty(Model.PhoneNumber) || !string.IsNullOrEmpty(Model.Email)))
{
                    <text> | </text>
}
                <span class="editable" contenteditable="false" data-placeholder="Phone">@(Model.PhoneNumber ?? "")</span>
                @if (!string.IsNullOrEmpty(Model.PhoneNumber) && !string.IsNullOrEmpty(Model.Email))
                {
                    <text> | </text>
                }
                <span class="editable" contenteditable="false" data-placeholder="Email">@(Model.Email ?? "")</span>
            </div>

            @if (!string.IsNullOrEmpty(Model.LinkedInLink) || !string.IsNullOrEmpty(Model.PortfolioLink))
            {
                <div class="contact-links">
                    @if (!string.IsNullOrEmpty(Model.LinkedInLink))
                    {
                        <span>LinkedIn: <span class="editable" contenteditable="false" data-placeholder="LinkedIn URL">@Model.LinkedInLink</span></span>
                    }
                    @if (!string.IsNullOrEmpty(Model.LinkedInLink) && !string.IsNullOrEmpty(Model.PortfolioLink))
                    {
                        <text> | </text>
                    }
                    @if (!string.IsNullOrEmpty(Model.PortfolioLink))
                    {
                        <span>Portfolio: <span class="editable" contenteditable="false" data-placeholder="Portfolio URL">@Model.PortfolioLink</span></span>
                    }
                </div>
            }
        </div>

        <!-- Horizontal Line -->
        <hr class="header-separator" />

        <!-- Professional Summary Section -->
        @if (!string.IsNullOrEmpty(Model.Bio))
        {
            <div class="section">
                <h2 class="section-title">Professional Summary</h2>
                <div class="summary editable" contenteditable="false" data-placeholder="Write your professional summary here...">@Model.Bio</div>
            </div>
        }

        <!-- Skills Section -->
        @if (Model.Skills != null && Model.Skills.Any())
        {
            <div class="section" id="skillsSection">
                <h2 class="section-title">Core Competencies</h2>
                <div class="skills-content" id="skillsContent">
                    @foreach (var skillGroup in Model.Skills.GroupBy(s => s.SkillType ?? "Technical Skills"))
                    {
                        <div class="skill-category" data-skill-type="@skillGroup.Key">
                            <span class="skill-category-title editable" contenteditable="false" data-placeholder="Skill Category">@skillGroup.Key:</span>
                            <span class="skill-items editable" contenteditable="false" data-placeholder="Add skills separated by bullets"
                                  data-skill-ids="@string.Join(",", skillGroup.Select(s => s.SkillId))">
                                @string.Join(" • ", skillGroup.Select(s => s.SkillName))
                            </span>
                            <button class="remove-item-btn" onclick="removeItem(this.parentElement)">✕</button>
                        </div>
                    }
                </div>
                <div class="add-item-container">
                    <button class="add-item-btn" onclick="addSkillCategory()">➕ Add Skill Category</button>
                </div>
            </div>
        }

        <!-- Experience Section -->
        @if (Model.Experiences != null && Model.Experiences.Any())
        {
            <div class="section" id="experienceSection">
                <h2 class="section-title">Professional Experience</h2>
                <div id="experienceContent">
                    @foreach (var experience in Model.Experiences.OrderByDescending(e => e.StartDate))
                    {
                        <div class="experience-item" data-experience-id="@experience.ExperienceId">
                            <div class="item-header">
                                <div class="item-title-line">
                                    <div class="item-title editable" contenteditable="false" data-placeholder="Job Title">@experience.Title</div>
                                    <div class="item-duration editable" contenteditable="false" data-placeholder="Start - End">
                                        @experience.StartDate.ToString("MMM yyyy") - @(experience.EndDate?.ToString("MMM yyyy") ?? "Present")
                                    </div>
                                </div>
                                <div class="item-company editable" contenteditable="false" data-placeholder="Company Name">@experience.Company</div>
                            </div>
                            @if (!string.IsNullOrEmpty(experience.Duties))
                            {
                                @if (experience.Duties.Contains('\n') || experience.Duties.Contains('\r'))
                                {
                                    @foreach (var duty in experience.Duties.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        @if (!string.IsNullOrWhiteSpace(duty))
                                        {
                                            <div class="bullet-point editable" contenteditable="false" data-placeholder="Responsibility or achievement">@duty.Trim()</div>
                                        }
                                    }
                                }
                                else
                                {
                                    <div class="item-description editable" contenteditable="false" data-placeholder="Describe your responsibilities and achievements...">@experience.Duties</div>
                                }
                            }
                            <button class="remove-item-btn" onclick="removeItem(this.parentElement)">✕</button>
                        </div>
                    }
                </div>
                <div class="add-item-container">
                    <button class="add-item-btn" onclick="addExperience()">➕ Add Experience</button>
                </div>
            </div>
        }


        <!-- Education Section -->
        @if (Model.Educations != null && Model.Educations.Any())
        {
            <div class="section" id="educationSection">
                <h2 class="section-title">Education</h2>
                <div id="educationContent">
                    @foreach (var education in Model.Educations.OrderByDescending(e => e.StartDate))
                    {
                        <div class="education-item" data-education-id="@education.EducationId">
                            <div class="item-header">
                                <div class="item-title-line">
                                    <div class="item-title editable" contenteditable="false" data-placeholder="Institution Name">@education.CollegeName</div>
                                    <div class="item-duration editable" contenteditable="false" data-placeholder="Start - End">
                                        @education.StartDate.ToString("MMM yyyy") - @(education.EndDate?.ToString("MMM yyyy") ?? "Present")
                                    </div>
                                </div>
                                <div class="item-company editable" contenteditable="false" data-placeholder="Major/Field of Study">@education.Major</div>
                                @if (!string.IsNullOrEmpty(education.DegreeType) || education.GPA.HasValue)
                                {
                                    <div class="item-degree-gpa">
                                        <div class="item-degree editable" contenteditable="false" data-placeholder="Degree Type">@(education.DegreeType ?? "")</div>
                                        @if (education.GPA.HasValue)
                                        {
                                            <div class="item-gpa editable" contenteditable="false" data-placeholder="GPA">GPA: @education.GPA.Value.ToString("F2")</div>
                                        }
                                        else
                                        {
                                            <div class="item-gpa editable" contenteditable="false" data-placeholder="GPA"></div>
                                        }
                                    </div>
                                }
                            </div>
                            <button class="remove-item-btn" onclick="removeItem(this.parentElement)">✕</button>
                        </div>
                    }
                </div>
                <div class="add-item-container">
                    <button class="add-item-btn" onclick="addEducation()">➕ Add Education</button>
                </div>
            </div>
        }

        <!-- Languages and Certificates Two-Column Layout -->
        @{
            var hasLanguages = Model.Languages != null && Model.Languages.Any();
            var hasCertificates = Model.Certificates != null && Model.Certificates.Any();
        }

        @if (hasLanguages && hasCertificates)
        {
            <div class="two-column-section">
                <!-- Languages Column -->
                <div class="column">
                    <div class="section" id="languagesSection">
                        <h2 class="section-title">Languages</h2>
                        <div class="languages-content" id="languagesContent">
                            <div class="languages-list">
                                @foreach (var language in Model.Languages)
                                {
                                    <div class="language-item-container" data-language-id="@language.LanguageId">
                                        <div class="language-item">
                                            <span class="language-name editable" contenteditable="false" data-placeholder="Language">@language.LanguageName</span>
                                            <span class="language-level editable" contenteditable="false" data-placeholder="(Level)">(@(language.Level ?? ""))</span>
                                        </div>
                                        <button class="remove-item-btn" onclick="removeItem(this.parentElement)">✕</button>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="add-item-container">
                            <button class="add-item-btn" onclick="addLanguage()">➕ Add Language</button>
                        </div>
                    </div>
                </div>

                <!-- Certificates Column -->
                <div class="column">
                    <div class="section" id="certificatesSection">
                        <h2 class="section-title">Certifications</h2>
                        <div id="certificatesContent">
                            @foreach (var certificate in Model.Certificates.OrderByDescending(c => c.StartDate).Take(5))
                            {
                                <div class="certificate-item" style="margin-bottom: 10px;" data-certificate-id="@certificate.CertificateId">
                                    <div class="item-header">
                                        <div class="item-title" style="font-size: 10pt; margin-bottom: 2px;">
                                            <span class="editable" contenteditable="false" data-placeholder="Certificate Name">@certificate.TopicName</span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(certificate.ProviderName))
                                        {
                                            <div class="item-provider editable" contenteditable="false" data-placeholder="Provider">@certificate.ProviderName</div>
                                        }
                                    </div>
                                    <button class="remove-item-btn" onclick="removeItem(this.parentElement)">✕</button>
                                </div>
                            }
                        </div>
                        <div class="add-item-container">
                            <button class="add-item-btn" onclick="addCertificate()">➕ Add Certificate</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        else if (hasLanguages)
        {
            <!-- Languages Section - Full Width -->
            <div class="section" id="languagesSection">
                <h2 class="section-title">Languages</h2>
                <div class="languages-content" id="languagesContent">
                    <div class="languages-list">
                        @foreach (var language in Model.Languages)
                        {
                            <div class="language-item-container" data-language-id="@language.LanguageId">
                                <div class="language-item">
                                    <span class="language-name editable" contenteditable="false" data-placeholder="Language">@language.LanguageName</span>
                                    <span class="language-level editable" contenteditable="false" data-placeholder="(Level)">(@(language.Level ?? ""))</span>
                                </div>
                                <button class="remove-item-btn" onclick="removeItem(this.parentElement)">✕</button>
                            </div>
                        }
                    </div>
                </div>
                <div class="add-item-container">
                    <button class="add-item-btn" onclick="addLanguage()">➕ Add Language</button>
                </div>
            </div>
        }
        else if (hasCertificates)
        {
            <!-- Certificates Section - Full Width -->
            <div class="section" id="certificatesSection">
                <h2 class="section-title">Certifications</h2>
                <div id="certificatesContent">
                    @foreach (var certificate in Model.Certificates.OrderByDescending(c => c.StartDate))
                    {
                        <div class="certificate-item" data-certificate-id="@certificate.CertificateId">
                            <div class="item-header">
                                <div class="item-title-line">
                                    <div class="item-title editable" contenteditable="false" data-placeholder="Certificate Name">@certificate.TopicName</div>
                                    @if (certificate.StartDate != default(DateOnly))
                                    {
                                        <div class="item-duration editable" contenteditable="false" data-placeholder="Date">@certificate.StartDate.ToString("MMM yyyy")</div>
                                    }
                                    else
                                    {
                                        <div class="item-duration editable" contenteditable="false" data-placeholder="Date"></div>
                                    }
                                </div>
                                @if (!string.IsNullOrEmpty(certificate.ProviderName))
                                {
                                    <div class="item-provider editable" contenteditable="false" data-placeholder="Provider/Institution">@certificate.ProviderName</div>
                                }
                            </div>
                            <button class="remove-item-btn" onclick="removeItem(this.parentElement)">✕</button>
                        </div>
                    }
                </div>
                <div class="add-item-container">
                    <button class="add-item-btn" onclick="addCertificate()">➕ Add Certificate</button>
                </div>
            </div>
        }
    </div>

    <script>
            let isEditing = false;
            let originalContent = '';

            // Store original content
            document.addEventListener('DOMContentLoaded', function() {
                originalContent = document.getElementById('cvContainer').innerHTML;
            });

            // Toggle edit mode
            document.getElementById('editBtn').addEventListener('click', function() {
                toggleEditMode();
            });

            document.getElementById('saveBtn').addEventListener('click', function() {
                saveChanges();
            });

            document.getElementById('resetBtn').addEventListener('click', function() {
                resetChanges();
            });

            document.getElementById('printBtn').addEventListener('click', function() {
                window.print();
            });

            document.getElementById('downloadBtn').addEventListener('click', function() {
                downloadPDF();
            });

            function toggleEditMode() {
                isEditing = !isEditing;
                const container = document.getElementById('cvContainer');
                const editBtn = document.getElementById('editBtn');
                const saveBtn = document.getElementById('saveBtn');
                const resetBtn = document.getElementById('resetBtn');

                if (isEditing) {
                    container.classList.add('editing');
                    document.querySelectorAll('.editable').forEach(el => {
                        el.contentEditable = true;
                    });
                    editBtn.style.display = 'none';
                    saveBtn.style.display = 'block';
                    resetBtn.style.display = 'block';
                    editBtn.textContent = '🖊️ Enable Editing';
                } else {
                    container.classList.remove('editing');
                    document.querySelectorAll('.editable').forEach(el => {
                        el.contentEditable = false;
                    });
                    editBtn.style.display = 'block';
                    saveBtn.style.display = 'none';
                    resetBtn.style.display = 'none';
                }
            }

            function saveChanges() {
                const saveBtn = document.getElementById('saveBtn');
                const originalText = saveBtn.textContent;
                saveBtn.textContent = '⏳ Saving...';
                saveBtn.disabled = true;

                const resume = parseResumeFromDOM();

                // Debug: Log the resume object
                console.log('Resume object being sent:', resume);
                console.log('JSON being sent:', JSON.stringify(resume));

                fetch('/Resume/UpdateResume', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify(resume)
                })
                .then(response => {
                    // Debug: Log the response
                    console.log('Response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Response data:', data);
                    if (data.success) {
                        originalContent = document.getElementById('cvContainer').innerHTML;
                        toggleEditMode();
                        showNotification('Changes saved successfully!', 'success');
                    } else {
                        showNotification('Error saving changes: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Error saving changes. Please try again.', 'error');
                })
                .finally(() => {
                    saveBtn.textContent = originalText;
                    saveBtn.disabled = false;
                });
            }

            function parseResumeFromDOM() {
                const resume = {
                    resumeId: '@Model.ResumeId',
                    firstName: '',
                    lastName: '',
                    title: '',
                    address: '',
                    phoneNumber: '',
                    email: '',
                    linkedInLink: '',
                    portfolioLink: '',
                    bio: '',
                    experiences: [],
                    educations: [],
                    skills: [],
                    languages: [],
                    certificates: []
                };

                // Parse header information
                const header = document.querySelector('.cv-header');
                const nameElements = header.querySelector('h1').querySelectorAll('.editable');
                resume.firstName = nameElements[0]?.textContent.trim() || '';
                resume.lastName = nameElements[1]?.textContent.trim() || '';

                const jobTitle = header.querySelector('.job-title .editable');
                                resume.title = jobTitle?.textContent.trim() || '';

                const contactInfoElements = header.querySelector('.contact-info').querySelectorAll('.editable');
                resume.address = contactInfoElements[0]?.textContent.trim() || '';
                resume.phoneNumber = contactInfoElements[1]?.textContent.trim() || '';
                resume.email = contactInfoElements[2]?.textContent.trim() || '';

                const contactLinks = header.querySelector('.contact-links');
                if (contactLinks) {
                    const linkElements = contactLinks.querySelectorAll('.editable');
                    linkElements.forEach((el, index) => {
                        const text = el.textContent.trim();
                        if (el.parentElement.textContent.includes('LinkedIn:')) {
                            resume.linkedInLink = text;
                        } else if (el.parentElement.textContent.includes('Portfolio:')) {
                            resume.portfolioLink = text;
                        }
                    });
                }

                // Parse professional summary
                const summaryElement = document.querySelector('.summary.editable');
                resume.bio = summaryElement?.textContent.trim() || '';

                // Parse experiences - Updated to use data attributes
                const experienceItems = document.querySelectorAll('.experience-item');
                experienceItems.forEach((item, index) => {
                    const experienceId = item.dataset.experienceId || '00000000-0000-0000-0000-000000000000';
                    const title = item.querySelector('.item-title')?.textContent.trim() || '';
                    const duration = item.querySelector('.item-duration')?.textContent.trim() || '';
                    const company = item.querySelector('.item-company')?.textContent.trim() || '';

                    let duties = '';
                    const bulletPoints = item.querySelectorAll('.bullet-point');
                    if (bulletPoints.length > 0) {
                        duties = Array.from(bulletPoints).map(bp => bp.textContent.trim()).join('\n');
                    } else {
                        const description = item.querySelector('.item-description');
                        duties = description?.textContent.trim() || '';
                    }

                    const [startDate, endDate] = parseDurationString(duration);

                    resume.experiences.push({
                        experienceId: experienceId,
                        title: title,
                        company: company,
                        duties: duties,
                        startDate: startDate,
                        endDate: endDate
                    });
                });

                
                        // Parse educations - Updated to include degree type and GPA
        const educationItems = document.querySelectorAll('.education-item');
        educationItems.forEach(item => {
            const educationId = item.dataset.educationId || '00000000-0000-0000-0000-000000000000';
            const collegeName = item.querySelector('.item-title')?.textContent.trim() || '';
            const duration = item.querySelector('.item-duration')?.textContent.trim() || '';
            const major = item.querySelector('.item-company')?.textContent.trim() || '';
            const degreeType = item.querySelector('.item-degree')?.textContent.trim() || '';
            const gpaText = item.querySelector('.item-gpa')?.textContent.trim() || '';

            // Parse GPA from text like "GPA: 3.75" or just "3.75"
            let gpa = null;
            if (gpaText) {
                const gpaMatch = gpaText.match(/(\d+\.?\d*)/);
                if (gpaMatch) {
                    const parsedGpa = parseFloat(gpaMatch[1]);
                    if (!isNaN(parsedGpa) && parsedGpa >= 0 && parsedGpa <= 4.0) {
                        gpa = parsedGpa;
                    }
                }
            }

            const [startDate, endDate] = parseDurationString(duration);

            resume.educations.push({
                educationId: educationId,
                collegeName: collegeName,
                major: major,
                degreeType: degreeType,
                gpa: gpa,
                startDate: startDate,
                endDate: endDate
            });
        });

                // Parse skills - Updated to handle existing skill IDs
                const skillCategories = document.querySelectorAll('.skill-category');
                skillCategories.forEach(category => {
                    const categoryTitle = category.querySelector('.skill-category-title')?.textContent.replace(':', '').trim() || 'Technical Skills';
                    const skillsElement = category.querySelector('.skill-items');
                    const skillsText = skillsElement?.textContent.trim() || '';
                    const skillIds = skillsElement?.dataset.skillIds?.split(',') || [];
                    const skills = skillsText.split('•').map(s => s.trim()).filter(s => s);

                    skills.forEach((skillName, index) => {
                        resume.skills.push({
                            skillId: skillIds[index] || '00000000-0000-0000-0000-000000000000',
                            skillName: skillName,
                            skillType: categoryTitle
                        });
                    });
                });

                // Parse languages - Updated to use data attributes
                const languageItems = document.querySelectorAll('.language-item-container');
                languageItems.forEach(item => {
                    const languageId = item.dataset.languageId || '00000000-0000-0000-0000-000000000000';
                    const name = item.querySelector('.language-name')?.textContent.trim() || '';
                    const levelText = item.querySelector('.language-level')?.textContent.trim() || '';
                    const level = levelText.replace(/[()]/g, '').trim();

                    resume.languages.push({
                        languageId: languageId,
                        languageName: name,
                        level: level
                    });
                });

                // Parse certificates - Updated to use data attributes
                const certificateItems = document.querySelectorAll('.certificate-item');
                certificateItems.forEach(item => {
                    const certificateId = item.dataset.certificateId || '00000000-0000-0000-0000-000000000000';
                    const topicName = item.querySelector('.item-title .editable, .item-title span.editable')?.textContent.trim() || '';
                    const providerName = item.querySelector('.item-provider')?.textContent.trim() || '';
                    const dateText = item.querySelector('.item-duration')?.textContent.trim() || '';

                    resume.certificates.push({
                        certificateId: certificateId,
                        topicName: topicName,
                        providerName: providerName,
                        startDate: parseSingleDate(dateText)
                    });
                });

                return resume;
            }

                   function parseDurationString(durationStr) {
            // Parse strings like "Jan 2020 - Dec 2021" or "Jan 2020 - Present"
            if (!durationStr || durationStr.trim() === '') return [null, null];

            const parts = durationStr.split('-').map(s => s.trim());
            if (parts.length < 2) {
                // Handle single date case
                const startDate = parseSingleDate(parts[0]);
                return [startDate, null];
            }

            const startDate = parseSingleDate(parts[0]);
            const endDate = parts[1]?.toLowerCase() === 'present' ? null : parseSingleDate(parts[1]);

            return [startDate, endDate];
        }

        function parseSingleDate(dateStr) {
            if (!dateStr || dateStr.trim() === '' || dateStr.toLowerCase() === 'present') return null;

            // Clean the date string
            dateStr = dateStr.trim();

            // Try to parse dates like "Jan 2020", "January 2020", "01/2020", "2020-01"
            const months = {
                'jan': 1, 'january': 1,
                'feb': 2, 'february': 2,
                'mar': 3, 'march': 3,
                'apr': 4, 'april': 4,
                'may': 5,
                'jun': 6, 'june': 6,
                'jul': 7, 'july': 7,
                'aug': 8, 'august': 8,
                'sep': 9, 'september': 9,
                'oct': 10, 'october': 10,
                'nov': 11, 'november': 11,
                'dec': 12, 'december': 12
            };

            // Handle "MMM YYYY" or "MMMM YYYY" format
            const spacePattern = /^([a-zA-Z]+)\s+(\d{4})$/;
            const spaceMatch = dateStr.toLowerCase().match(spacePattern);
            if (spaceMatch) {
                const monthName = spaceMatch[1].toLowerCase();
                const year = parseInt(spaceMatch[2]);
                const monthNum = months[monthName];

                if (monthNum && !isNaN(year) && year > 1900 && year < 2100) {
                    // Return in YYYY-MM-DD format for the backend
                    return `${year}-${monthNum.toString().padStart(2, '0')}-01`;
                }
            }

            // Handle "MM/YYYY" format
            const slashPattern = /^(\d{1,2})\/(\d{4})$/;
            const slashMatch = dateStr.match(slashPattern);
            if (slashMatch) {
                const month = parseInt(slashMatch[1]);
                const year = parseInt(slashMatch[2]);

                if (month >= 1 && month <= 12 && year > 1900 && year < 2100) {
                    return `${year}-${month.toString().padStart(2, '0')}-01`;
                }
            }

            // Handle "YYYY-MM" format
            const dashPattern = /^(\d{4})-(\d{1,2})$/;
            const dashMatch = dateStr.match(dashPattern);
            if (dashMatch) {
                const year = parseInt(dashMatch[1]);
                const month = parseInt(dashMatch[2]);

                if (month >= 1 && month <= 12 && year > 1900 && year < 2100) {
                    return `${year}-${month.toString().padStart(2, '0')}-01`;
                }
            }

            // Handle just year "YYYY"
            const yearPattern = /^(\d{4})$/;
            const yearMatch = dateStr.match(yearPattern);
            if (yearMatch) {
                const year = parseInt(yearMatch[1]);
                if (year > 1900 && year < 2100) {
                    return `${year}-01-01`;
                }
            }

            console.warn(`Could not parse date: "${dateStr}"`);
            return null;
        }

            function showNotification(message, type) {
                // Create a toast notification
                const notification = document.createElement('div');
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    left: 50%;
                    transform: translateX(-50%);
                    padding: 15px 25px;
                    background: ${type === 'success' ? '#28a745' : '#dc3545'};
                    color: white;
                    border-radius: 5px;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                    z-index: 10000;
                    animation: slideIn 0.3s ease;
                `;
                notification.textContent = message;
                document.body.appendChild(notification);

                setTimeout(() => {
                    notification.style.animation = 'slideOut 0.3s ease';
                    setTimeout(() => notification.remove(), 300);
                }, 3000);
            }

            // Add animation styles
            const style = document.createElement('style');
            style.textContent = `
            @@keyframes slideIn {
                    from { transform: translateX(-50%) translateY(-100%); opacity: 0; }
                    to { transform: translateX(-50%) translateY(0); opacity: 1; }
                }
            @@keyframes slideOut {
                    from { transform: translateX(-50%) translateY(0); opacity: 1; }
                    to { transform: translateX(-50%) translateY(-100%); opacity: 0; }
                }
            `;
            document.head.appendChild(style);

            function resetChanges() {
                if (confirm('Are you sure you want to reset all changes?')) {
                    document.getElementById('cvContainer').innerHTML = originalContent;
                    toggleEditMode();
                }
            }

            function downloadPDF() {
                const wasEditing = isEditing;
                if (isEditing) {
                    toggleEditMode();
                }

                setTimeout(() => {
                    window.print();
                    if (wasEditing) {
                        toggleEditMode();
                    }
                }, 100);
            }

            function removeItem(element) {
                if (confirm('Are you sure you want to remove this item?')) {
                    element.remove();
                }
            }

            // Updated add functions with data attributes
            function addExperience() {
                const container = document.getElementById('experienceContent');
                const newItem = document.createElement('div');
                newItem.className = 'experience-item';
                newItem.dataset.experienceId = '00000000-0000-0000-0000-000000000000';
                newItem.innerHTML = `
                    <div class="item-header">
                        <div class="item-title-line">
                            <div class="item-title editable" contenteditable="true" data-placeholder="Job Title"></div>
                            <div class="item-duration editable" contenteditable="true" data-placeholder="Start - End"></div>
                        </div>
                        <div class="item-company editable" contenteditable="true" data-placeholder="Company Name"></div>
                    </div>
                    <div class="item-description editable" contenteditable="true" data-placeholder="Describe your responsibilities and achievements..."></div>
                    <button class="remove-item-btn" onclick="removeItem(this.parentElement)">✕</button>
                `;
                container.appendChild(newItem);
            }

            function addEducation() {
                const container = document.getElementById('educationContent');
                const newItem = document.createElement('div');
                newItem.className = 'education-item';
                newItem.dataset.educationId = '00000000-0000-0000-0000-000000000000';
                newItem.innerHTML = `
                    <div class="item-header">
                        <div class="item-title-line">
                            <div class="item-title editable" contenteditable="true" data-placeholder="Institution Name"></div>
                            <div class="item-duration editable" contenteditable="true" data-placeholder="Start - End"></div>
                        </div>
                        <div class="item-company editable" contenteditable="true" data-placeholder="Major/Field of Study"></div>
                        <div class="item-degree-gpa">
                            <div class="item-degree editable" contenteditable="true" data-placeholder="Degree Type (e.g., Bachelor's, Master's)"></div>
                            <div class="item-gpa editable" contenteditable="true" data-placeholder="GPA: 0.00"></div>
                        </div>
                    </div>
                    <button class="remove-item-btn" onclick="removeItem(this.parentElement)">✕</button>
                `;
                container.appendChild(newItem);
        }

            function addCertificate() {
                const container = document.getElementById('certificatesContent');
                const newItem = document.createElement('div');
                newItem.className = 'certificate-item';
                newItem.dataset.certificateId = '00000000-0000-0000-0000-000000000000';

                // Check if we're in two-column layout or full-width layout
                const isTwoColumn = container.closest('.two-column-section') !== null;

                if (isTwoColumn) {
                    newItem.style.marginBottom = '10px';
                    newItem.innerHTML = `
                        <div class="item-header">
                            <div class="item-title" style="font-size: 10pt; margin-bottom: 2px;">
                                <span class="editable" contenteditable="true" data-placeholder="Certificate Name"></span>
                            </div>
                            <div class="item-provider editable" contenteditable="true" data-placeholder="Provider"></div>
                        </div>
                        <button class="remove-item-btn" onclick="removeItem(this.parentElement)">✕</button>
                    `;
                } else {
                    newItem.innerHTML = `
                        <div class="item-header">
                            <div class="item-title-line">
                                <div class="item-title editable" contenteditable="true" data-placeholder="Certificate Name"></div>
                                <div class="item-duration editable" contenteditable="true" data-placeholder="Date"></div>
                            </div>
                            <div class="item-provider editable" contenteditable="true" data-placeholder="Provider/Institution"></div>
                        </div>
                        <button class="remove-item-btn" onclick="removeItem(this.parentElement)">✕</button>
                    `;
                }
                container.appendChild(newItem);
            }

            function addLanguage() {
                const languagesList = document.querySelector('.languages-list');
                const newItem = document.createElement('div');
                newItem.className = 'language-item-container';
                newItem.dataset.languageId = '00000000-0000-0000-0000-000000000000';
                newItem.innerHTML = `
                    <div class="language-item">
                        <span class="language-name editable" contenteditable="true" data-placeholder="Language"></span>
                        <span class="language-level editable" contenteditable="true" data-placeholder="(Level)"></span>
                    </div>
                    <button class="remove-item-btn" onclick="removeItem(this.parentElement)">✕</button>
                `;
                languagesList.appendChild(newItem);
            }

            function addSkillCategory() {
                const container = document.getElementById('skillsContent');
                const newItem = document.createElement('div');
                newItem.className = 'skill-category';
                newItem.innerHTML = `
                    <span class="skill-category-title editable" contenteditable="true" data-placeholder="Skill Category">New Category:</span>
                    <span class="skill-items editable" contenteditable="true" data-placeholder="Add skills separated by bullets"></span>
                    <button class="remove-item-btn" onclick="removeItem(this.parentElement)">✕</button>
                `;
                container.appendChild(newItem);
            }

            // Print event handlers
            window.addEventListener('beforeprint', function() {
                document.querySelector('.control-panel').style.display = 'none';
                document.querySelector('.edit-mode-indicator').style.display = 'none';
            });

            window.addEventListener('afterprint', function() {
                document.querySelector('.control-panel').style.display = 'block';
                if (isEditing) {
                    document.querySelector('.edit-mode-indicator').style.display = 'block';
                }
            });

                        // Enhanced contenteditable behavior
            document.addEventListener('keydown', function(e) {
                if (e.target.classList.contains('editable') && e.key === 'Enter') {
                    if (!e.target.classList.contains('item-description') && !e.target.classList.contains('summary')) {
                        e.preventDefault();
                    }
                }
            });
    </script>
</body>
</html>
