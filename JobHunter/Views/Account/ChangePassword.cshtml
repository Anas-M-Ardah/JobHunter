@model JobHunter.DTOs.ChangePasswordDTO
@{
    ViewData["Title"] = "Change Password";
    Layout = "_DashBoard"; 
}

<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Change Password</h1>
    @Html.ActionLink("Back to Account", "Index", "Account", null, new { @class = "btn btn-secondary btn-sm" })
</div>

<!-- Content Row -->
<div class="row justify-content-center">
    <div class="col-lg-6">
        <!-- Change Password Card -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-lock"></i> Change Your Password
                </h6>
            </div>
            <div class="card-body">
                @using (Html.BeginForm("ChangePassword", "Account", FormMethod.Post, new { @class = "user" }))
                {
                    @Html.AntiForgeryToken()
                    
                    <!-- Validation Summary -->
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle"></i>
                            <strong>Please correct the following errors:</strong>
                            @Html.ValidationSummary(false, "", new { @class = "mb-0 mt-2" })
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    }

                    <div class="form-group">
                        @Html.LabelFor(m => m.CurrentPassword, new { @class = "form-label" })
                        <div class="input-group">
                            @Html.PasswordFor(m => m.CurrentPassword, new { @class = "form-control form-control-user", @placeholder = "Enter your current password" })
                            <div class="input-group-append">
                                <span class="input-group-text bg-transparent border-left-0" style="cursor: pointer;" onclick="togglePassword('CurrentPassword')">
                                    <i class="fas fa-eye" id="CurrentPassword-eye"></i>
                                </span>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.CurrentPassword, "", new { @class = "text-danger small" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.NewPassword, new { @class = "form-label" })
                        <div class="input-group">
                            @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control form-control-user", @placeholder = "Enter your new password" })
                            <div class="input-group-append">
                                <span class="input-group-text bg-transparent border-left-0" style="cursor: pointer;" onclick="togglePassword('NewPassword')">
                                    <i class="fas fa-eye" id="NewPassword-eye"></i>
                                </span>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.NewPassword, "", new { @class = "text-danger small" })
                        <small class="form-text text-muted">
                            Password must be at least 6 characters long.
                        </small>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "form-label" })
                        <div class="input-group">
                            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control form-control-user", @placeholder = "Confirm your new password" })
                            <div class="input-group-append">
                                <span class="input-group-text bg-transparent border-left-0" style="cursor: pointer;" onclick="togglePassword('ConfirmPassword')">
                                    <i class="fas fa-eye" id="ConfirmPassword-eye"></i>
                                </span>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger small" })
                    </div>

                    <hr>

                    <div class="form-group row">
                        <div class="col-sm-6 mb-3 mb-sm-0">
                            <button type="submit" class="btn btn-primary btn-user btn-block">
                                <i class="fas fa-key"></i> Change Password
                            </button>
                        </div>
                        <div class="col-sm-6">
                            @Html.ActionLink("Cancel", "Index", "Account", null, new { @class = "btn btn-secondary btn-user btn-block" })
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Password Requirements Card -->
    <div class="col-lg-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-info">
                    <i class="fas fa-info-circle"></i> Password Requirements
                </h6>
            </div>
            <div class="card-body">
                <p class="mb-3">Your new password must meet the following requirements:</p>
                <ul class="list-unstyled">
                    <li class="mb-2">
                        <i class="fas fa-check text-success"></i> At least 6 characters long
                    </li>
                    <li class="mb-2">
                        <i class="fas fa-check text-success"></i> Contains both letters and numbers (recommended)
                    </li>
                    <li class="mb-2">
                        <i class="fas fa-check text-success"></i> Contains special characters (recommended)
                    </li>
                    <li class="mb-2">
                        <i class="fas fa-check text-success"></i> Different from your current password
                    </li>
                </ul>
                
                <hr>
                
                <h6 class="font-weight-bold">Security Tips:</h6>
                <ul class="small text-muted">
                    <li>Use a unique password you don't use elsewhere</li>
                    <li>Consider using a password manager</li>
                    <li>Don't share your password with anyone</li>
                    <li>Change your password regularly</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle"></i> @TempData["Success"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle"></i> @TempData["Error"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <style>
        .input-group .form-control-user {
            border-right: none;
        }
        
        .input-group-text {
            background: transparent !important;
            border-left: none !important;
            color: #858796;
        }
        
        .input-group-text:hover {
            color: #5a5c69;
        }
        
        /* Ensure the input group maintains the rounded corners */
        .input-group .form-control:not(:last-child) {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }
        
        .input-group .input-group-append .input-group-text {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
            border-top-right-radius: 10rem;
            border-bottom-right-radius: 10rem;
        }
    </style>
    
    <script>
        $(document).ready(function() {
            // Auto-dismiss alerts after 5 seconds
            setTimeout(function() {
                $('.alert').fadeOut('slow');
            }, 5000);

            // Password strength indicator
            $('#NewPassword').on('input', function() {
                var password = $(this).val();
                var strength = 0;
                
                if (password.length >= 6) strength++;
                if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength++;
                if (password.match(/[0-9]/)) strength++;
                if (password.match(/[^a-zA-Z0-9]/)) strength++;
                
                var strengthText = '';
                var strengthClass = '';
                
                switch(strength) {
                    case 0:
                    case 1:
                        strengthText = 'Weak';
                        strengthClass = 'text-danger';
                        break;
                    case 2:
                        strengthText = 'Fair';
                        strengthClass = 'text-warning';
                        break;
                    case 3:
                        strengthText = 'Good';
                        strengthClass = 'text-info';
                        break;
                    case 4:
                        strengthText = 'Strong';
                        strengthClass = 'text-success';
                        break;
                }
                
                // Remove existing strength indicator
                $('.password-strength').remove();
                
                if (password.length > 0) {
                    $(this).closest('.form-group').find('.form-text').after('<small class="password-strength form-text ' + strengthClass + '">Password strength: ' + strengthText + '</small>');
                }
            });
        });

        // Toggle password visibility function
        function togglePassword(fieldId) {
            var passwordField = document.getElementById(fieldId);
            var eyeIcon = document.getElementById(fieldId + '-eye');
            
            if (passwordField.type === 'password') {
                passwordField.type = 'text';
                eyeIcon.classList.remove('fa-eye');
                eyeIcon.classList.add('fa-eye-slash');
            } else {
                passwordField.type = 'password';
                eyeIcon.classList.remove('fa-eye-slash');
                eyeIcon.classList.add('fa-eye');
            }
        }
    </script>
}